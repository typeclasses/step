module Step.Nontrivial
  (
    {- * Etc. -} module Step.Nontrivial.Prelude,
  ) where

import Step.Nontrivial.Drop
import Step.Nontrivial.Prelude
import Step.Nontrivial.Unsafe

-- stripPrefix :: Eq x => ListLike xs x => Nontrivial xs x -> Nontrivial xs x -> Maybe xs
-- stripPrefix a b = ListLike.stripPrefix (generalize a) (generalize b)

-- uncons :: ListLike xs x => Nontrivial xs x -> (x, xs)
-- uncons a = case ListLike.uncons (generalize a) of
--     Nothing -> error "trivial Nontrivial"
--     Just b -> b

-- fold :: ListLike xs x => [Nontrivial xs x] -> xs
-- fold = ListLike.foldMap generalize

-- isPrefixOf :: ListLike xs x => Eq x => Nontrivial xs x -> Nontrivial xs x -> Bool
-- a `isPrefixOf` b = generalize a `ListLike.isPrefixOf` generalize b
