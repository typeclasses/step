cabal-version: 3.0

name: step
version: 0

common base
    default-language: Haskell2010
    ghc-options: -Wall -fdefer-typed-holes -Wmissing-deriving-strategies

    -- Temporary for early stage development
    ghc-options: -fno-warn-unused-imports

    default-extensions:
        AllowAmbiguousTypes
        ApplicativeDo
        BangPatterns
        BlockArguments
        ConstraintKinds
        DataKinds
        DeriveFunctor
        DerivingStrategies
        DerivingVia
        FlexibleContexts
        FlexibleInstances
        FunctionalDependencies
        LambdaCase
        GADTs
        GeneralizedNewtypeDeriving
        MultiParamTypeClasses
        NoImplicitPrelude
        OverloadedStrings
        -- QualifiedDo
        RankNTypes
        ScopedTypeVariables
        StandaloneDeriving
        StandaloneKindSignatures
        TemplateHaskell
        TypeApplications
        TypeFamilies
        TypeOperators
        ViewPatterns
    build-depends:
        base
      , bytestring
      , containers
      , data-default-class
      , hedgehog
      , list-transformer
      , ListLike ^>= 4.7
      , loc ^>= 0.1.4
      , transformers
      , optics
    mixins:
        base
          ( Data.Bool as Bool
          , Data.Char as Char
          , Data.Coerce as Coerce
          , Data.Kind as Kind
          , Data.Word as Word
          , Text.Show as Show
          , Control.Monad as Monad
          , Prelude as BasePrelude
          , Data.Function as Function
          , Numeric.Natural as Natural
          , Control.Applicative as Applicative
          , Data.Maybe as Maybe
          , Data.Foldable as Foldable
          , Data.String as String
          , Data.Functor as Functor
          , Data.Functor.Identity as Identity
          , Data.Semigroup as Semigroup
          , Data.Monoid as Monoid
          , Data.Void as Void
          )
      , bytestring
          ( Data.ByteString as ByteString
          , Data.ByteString.Lazy as LByteString
          )
      , containers
          ( Data.Set as Set
          , Data.Sequence as Seq
          , Data.Map.Strict as Map
          , Data.IntMap.Strict as IntMap
          )
      , data-default-class (Data.Default.Class as Default)
      , list-transformer (List.Transformer as ListT)
      , ListLike (Data.ListLike as ListLike)
      , transformers
          ( Control.Monad.Trans.State.Strict as State
          , Control.Monad.Trans.Class as MonadTrans
          , Control.Monad.Trans.Reader as Reader
          , Control.Monad.Trans.Except as Except
          )
      , loc (Data.Loc as Loc, Data.Loc.SpanOrLoc as SpanOrLoc)
      , optics (Optics)

library
    import: base
    hs-source-dirs: library/step
    build-depends: step-internal
    mixins: step-internal (Step.Internal.Prelude)
    exposed-modules:
        Step.Buffer.Base
        Step.Buffer.State

        Step.BufferedStream.Base
        Step.BufferedStream.State

        Step.Cursor.Base
        Step.Cursor.State
        Step.Cursor.Tentative

        Step.CursorPosition.Base

        Step.Document.Config
        Step.Document.Do
        Step.Document.Error
        Step.Document.Loc
        Step.Document.Parser
        Step.Document.Prelude

        Step.DocumentMemory.Base
        Step.DocumentMemory.State

        Step.Kind.Base

        Step.Nontrivial.Base
        Step.Nontrivial.List
        Step.Nontrivial.ListT

        Step.LineHistory.Base
        Step.LineHistory.Build
        Step.LineHistory.State

        Step.Tentative.Base
        Step.Tentative.State

        Step.Test.InputChunking

library step-internal
    import: base
    hs-source-dirs: library/step-internal
    build-depends:
        optics ^>= 0.4
    exposed-modules:
        Step.Internal.Prelude
    other-modules:
        Step.Internal.Modify
        Step.Internal.RecordStream
        Step.Internal.Times
        Step.Internal.While

test-suite test-step
    import: base
    type: exitcode-stdio-1.0
    hs-source-dirs: test/test-step
    main-is: Main.hs
    build-depends: step, step-internal, hspec, hspec-hedgehog, text
    mixins:
        step-internal (Step.Internal.Prelude)
      , text (Data.Text as Text)
    other-modules:
        Step.Spec.DocumentParsing
        Step.Spec.LineHistory
